<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wu Chuan Blogs</title>
    <link>https://wuchuan.monster/</link>
    <description>Recent content on Wu Chuan Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 02 Mar 2020 14:12:19 +0800</lastBuildDate>
    
	<atom:link href="https://wuchuan.monster/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ajax</title>
      <link>https://wuchuan.monster/posts/ajax/</link>
      <pubDate>Mon, 02 Mar 2020 14:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/ajax/</guid>
      <description>AJAX 包括以下几个步骤。
 创建 XMLHttpRequest 实例 发出 HTTP 请求 接收服务器传回的数据 更新网页数据  </description>
    </item>
    
    <item>
      <title>JS碎片知识</title>
      <link>https://wuchuan.monster/posts/js%E7%A2%8E%E7%89%87/</link>
      <pubDate>Sun, 01 Mar 2020 14:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/js%E7%A2%8E%E7%89%87/</guid>
      <description>语句和表达式  语句:语句是为了完成某种任务而进行的操作,例如:  var a = 1 + 3
 表达式:为了得到返回值得计算式(1+3叫做表达式) 语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。  JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了
闭包： 闭包是指那些能够访问自由变量的函数。 自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。
闭包 = 函数 + 函数能够访问的自由变量
 从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。 从实践角度：以下函数才算是闭包：   即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回） 在代码中引用了自由变量  &amp;amp;&amp;amp; 在语句中表示且、和的意思，在表达式中是求值。（前者常用） | 在语句中是或的意思。 || 求值，短路逻辑，常用于保底值。
Promise 的用法，简单说就是一句话：使用then方法添加回调函数。
let  let 的作用域在最近的{}之间 如果你在let a 之前使用a,那么报错 如果你重复let a，报错  const 1.2.3同上 4. 只有一次赋值机会</description>
    </item>
    
    <item>
      <title>Vue 中的 .sync 修饰符</title>
      <link>https://wuchuan.monster/posts/sync/</link>
      <pubDate>Tue, 11 Feb 2020 14:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/sync/</guid>
      <description>.sync 修饰符，它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。 示例代码如下：
&amp;lt;comp :foo.sync=&amp;#34;bar&amp;#34;&amp;gt;&amp;lt;/comp&amp;gt;会被扩展为：
&amp;lt;comp :foo=&amp;#34;bar&amp;#34; @update:foo=&amp;#34;val =&amp;gt; bar = val&amp;#34;&amp;gt;&amp;lt;/comp&amp;gt;当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：
this.$emit(&amp;#39;update:foo&amp;#39;, newValue)猛一看不明白，下边我么通过一个实例（弹窗的关闭事件）来说明这个代码到底是怎么运用的。
&amp;lt;template&amp;gt;&amp;lt;div class=&amp;#34;details&amp;#34;&amp;gt;&amp;lt;myComponent :show.sync=&amp;#39;valueChild&amp;#39; style=&amp;#34;padding: 30px 20px 30px 5px;border:1px solid #ddd;margin-bottom: 10px;&amp;#34;&amp;gt;&amp;lt;/myComponent&amp;gt;&amp;lt;button @click=&amp;#34;changeValue&amp;#34;&amp;gt;toggle&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;script&amp;gt;import Vue from &amp;#39;vue&amp;#39;Vue.component(&amp;#39;myComponent&amp;#39;, {template: `&amp;lt;div v-if=&amp;#34;show&amp;#34;&amp;gt;&amp;lt;p&amp;gt;默认初始值是{{show}}，所以是显示的&amp;lt;/p&amp;gt;&amp;lt;button @click.stop=&amp;#34;closeDiv&amp;#34;&amp;gt;关闭&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;`,props:[&amp;#39;show&amp;#39;],methods: {closeDiv() {this.$emit(&amp;#39;update:show&amp;#39;, false); //触发 input 事件，并传入新值 }}})export default{data(){return{valueChild:true,}},methods:{changeValue(){this.</description>
    </item>
    
    <item>
      <title>Vue安装</title>
      <link>https://wuchuan.monster/posts/vue%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 05 Feb 2020 14:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/vue%E5%AE%89%E8%A3%85/</guid>
      <description> 安装@vue/cli  npm install -g @vue/cli# ORyarn global add @vue/cli //推荐 创建目录：vue create 路径（路径可用.点）
  选择使用配置(如下图)   进入目录，运行yarn serve开启webpack-dev-server（npm run serve）
  两个版本对应的文件名 完整版对应文件名：从CDN引入vue.js;vue.min.js;
非完整版对应文件名:vue.runtime.js;vue.runtime.min.js;
template 和 render 怎么用 Vue template的使用方法：直接写在页面上或者JS上
&amp;lt;template&amp;gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{n}}&amp;lt;button @click=&amp;quot;add&amp;quot;&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt;Vue render的使用方法
render函数接收一个参数h，这个参数是vue传的；用这个参数去创建实例
render(h){ return h(&#39;div&#39;, [this.n,h(&#39;{on:{click:this.add}’,&#39;+1&#39;])}如何用 codesandbox.io 写 Vue 代码  codesandbox.io 选择Vue,create sanbox 创建沙盒 exprot zip 导出文件 Browser 选项会提供一个链接预览  </description>
    </item>
    
    <item>
      <title>浅析MVC</title>
      <link>https://wuchuan.monster/posts/mvc%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Wed, 05 Feb 2020 10:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/mvc%E5%B0%8F%E7%BB%93/</guid>
      <description>MVC 三个对象分别做什么，给出伪代码示例 MVC包括三个对象，分别是M、V、C M-Model(数据模型) 负责操作所有数据 V-View(视图)负责所有UI界面 C-Controller(控制器)负责其他
MVC伪代码 const m = {//数据层，关于数据的操作放在这里 data:{n:parseInt(localStorage.getItem(&amp;#39;number&amp;#39;)||100)},//数据初始化 update:function (data) {//更新数据的方法 },delete:function (data) {//删除数据的方法 },get:function (data) {//获得数据的方法 }}const v = {//视图层，关于视图的操作放在这里 el:&amp;#39;挂载点&amp;#39;,html:&amp;#39;需要插入元素内的HTML内容&amp;#39;,render(&amp;#39;渲染html&amp;#39;)}const c = {//控制层，关于事件监听的放到这里 //找到重要的元素绑定事件 //如果触发事件调用更改数据方法及渲染方法 const a =$(&amp;#39;找到A&amp;#39;)const b = $(&amp;#39;找到B&amp;#39;)b.on(&amp;#39;click&amp;#39;,function(){//调用数据层方法更改数据 //调用视图层方法渲染页面 })}EventBus 有哪些 API，是做什么用的，给出伪代码示例 eventbus也是一种设计模式或者框架，主要用于组件/对象间通信的优化简化</description>
    </item>
    
    <item>
      <title>VScode使用VIM小结</title>
      <link>https://wuchuan.monster/posts/vscode%E4%B8%8Evim/</link>
      <pubDate>Tue, 14 Jan 2020 13:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/vscode%E4%B8%8Evim/</guid>
      <description>移动类（motion） h（左）、l（右）、j（上）、k（下）、f（front）、b（back）、u（up）
编辑类（operator） d（delete）、i（insert）、a（append）、c（change）、y（copy）、p（paste）
多行编辑添加一样的内容  CTRL+v 然后 a/A 或者 i/I 插入内容  复制、剪切、粘贴(普通模式、可视模式)  复制：yy/Y 复制一行 剪切：dd/D 剪切或删除一行 粘贴：p/P 粘贴（粘贴的地方不同)  其他  w 光标到单词末尾 b 光标到单词开头 x 删除一个字符 r/R 替换一个字符/替换模式 $ 到行尾 ^ 到行头 gg 到文本开头 G 到文本末尾 u 撤消最后一次修改 o 在当前行的下边插入新行 O 在当前行的上边插入新行 50% 移动到文本中间（数字可改） I 到首行插入 A 在当前行插入文本  </description>
    </item>
    
    <item>
      <title>flex布局</title>
      <link>https://wuchuan.monster/posts/flexgrid%E5%B8%83%E5%B1%80/</link>
      <pubDate>Mon, 13 Jan 2020 10:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/flexgrid%E5%B8%83%E5%B1%80/</guid>
      <description>flex container属性:
.container{display:flex;}把容器定义为flex； flex-direction:
.container{flex-direction:row|row-reverse |column|column-reverse;} row（默认值）：从左到右ltr；从右到左rtl row-reverse：从右到左ltr; 从左到右rtl column：与row上至下相同 column-reverse：与row-reverse下至上相同  flex-wrap
.container{flex-wrap:nowrap | wrap | wrap-reverse;} nowrap （默认）：所有弹性项目都在一行上 wrap：弹性项目将从上到下缠绕在多行上。 wrap-reverse：弹性项目将从下到上缠绕在多行上。 flex-flow: 这是flex-direction和flex-wrap属性的简写，它们一起定义了伸缩容器的主轴和交叉轴。默认值为row nowrap。  flex-flow:&amp;lt;&amp;#39;flex-direction&amp;#39;&amp;gt;||&amp;lt;&amp;#39;flex-wrap&amp;#39;&amp;gt;主轴对齐方式： flex-content
.container {justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;} flex-start （默认）：物品被包装在弹性方向的开始处。 flex-end：项目在伸缩方向的末端打包。 start：物品被包装到方向的起点writing-mode。 end：物品朝着方向的末端包装writing-mode。 left：项目朝着容器的左边缘包装，除非对而言没有意义flex-direction，则其行为类似于start。 right：物品会朝着容器的右边缘包装，除非对而言没有意义flex-direction，则其行为类似于start。 center：项目沿线居中 space-between：项目在行中均匀分布；第一项位于开始行，最后一项位于结束行 space-around：项目在行中均匀分布，并且周围有相等的空间。请注意，从视觉上看，空间是不相等的，因为所有项目的两侧都具有相等的空间。第一项相对于容器边缘有一个单位的空间，但是下一项之间有两个单位的空间，因为下一项具有自己的适用间距。 space-evenly：分配项目，以使任意两个项目之间的间距（以及到边缘的间距）相等。 次轴对齐方式:  align-items</description>
    </item>
    
    <item>
      <title>jQuery学习小结</title>
      <link>https://wuchuan.monster/posts/jquery%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sun, 12 Jan 2020 19:43:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/jquery%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</guid>
      <description>1. jQuery 如何获取元素 jQuery的基本设计思想和主要用法，就是&amp;quot;选择某个网页元素，然后对其进行某种操作&amp;rdquo;。这是它区别于其他Javascript库的根本特点。
使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()（简写为$），然后得到被选中的元素。
选择表达式可以是CSS选择器：
$(document) //选择整个文档对象$(&amp;#39;#myId&amp;#39;) //选择ID为myId的网页元素$(&amp;#39;div.myClass&amp;#39;) // 选择class为myClass的div元素$(&amp;#39;input[name=first]&amp;#39;) // 选择name属性等于first的input元素也可以是jQuery特有的表达式：
$(&amp;#39;a:first&amp;#39;) //选择网页中第一个a元素$(&amp;#39;tr:odd&amp;#39;) //选择表格的奇数行$(&amp;#39;#myForm :input&amp;#39;) // 选择表单中的input元素$(&amp;#39;div:visible&amp;#39;) //选择可见的div元素$(&amp;#39;div:gt(2)&amp;#39;) // 选择所有的div元素，除了前三个$(&amp;#39;div:animated&amp;#39;) // 选择当前处于动画状态的div元素2. jQuery 的链式操作是怎样的 jQuery的链式操作，就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来，比如：
$(&amp;#39;div&amp;#39;).find(&amp;#39;h3&amp;#39;).eq(2).html(&amp;#39;Hello&amp;#39;);分解开来，就是下面这样：
$(&amp;#39;div&amp;#39;) //找到div元素.find(&amp;#39;h3&amp;#39;) //选择其中的h3元素.eq(2) //选择第3个h3元素.html(&amp;#39;Hello&amp;#39;); //将它的内容改为Hello这是jQuery最令人称道、最方便的特点。它的原理在于每一步的jQuery操作，返回的都是一个jQuery对象，所以不同操作可以连在一起。
jQuery还提供了.end()方法，使得结果集可以后退一步：
$(&amp;#39;div&amp;#39;).find(&amp;#39;h3&amp;#39;).eq(2).html(&amp;#39;Hello&amp;#39;).end() //退回到选中所有的h3元素的那一步.eq(0) //选中第一个h3元素.</description>
    </item>
    
    <item>
      <title>new、call、apply、bine函数的实现</title>
      <link>https://wuchuan.monster/posts/js%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Sun, 12 Jan 2020 17:43:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/js%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>原型,共有属性： 修改共有属性 obj.proto.toString=&#39;xxx&amp;rsquo; //不推荐 Object.prototype.toString=&#39;xxx&amp;rsquo; 修改原型 obj.__proto__=common let obj = Object.create(common)
数组的增删改查 新建一个数组
let arr = [1,2,3]
let arr = new Array(1,2,3)
let arr = new Array(3)
转化： let arr = &amp;lsquo;1,2,3&amp;rsquo;.split(&#39;,&#39;)
let arr = &amp;lsquo;123&amp;rsquo;.split(&#39;&#39;)
Array.from(&amp;lsquo;123&amp;rsquo;)
伪数组：没有数组共有属性的‘数组’
合并数组：arr1.concat(arr2)
截取：arr1.slice(1)
删：delete arr[&amp;lsquo;0&amp;rsquo;] 直接改length也可删，不要随便改length
删头部: arr.shift() 删尾部:arr.pop() 删中间:arr.splice(index,1) arr.splice(index,1,&amp;lsquo;x&amp;rsquo;)//在删除的位置添加&#39;x&amp;rsquo; arr.splice(index,1,&amp;lsquo;x&amp;rsquo;,&amp;lsquo;y&amp;rsquo;)//在删除的位置添加&#39;x&amp;rsquo;,&amp;lsquo;y&amp;rsquo;
查看属性名： let arr=[1,2,3,4,5]; Object.keys(arr)//查属性名;Object.values(arr)//查属性值 for(let key in arr){console.log(${key}:${arr[key]})}
查看属性名和值： for(let i =0;i&amp;lt; arr.length;i++){ console.log(${i}:${arr[i]}) } //or arr.forEach(function(x,y){ console.log(${x}:${y}) }) 原生JS实现forEach: function forEach(array,fn){ for(let i = 0; i&amp;lt;array.</description>
    </item>
    
    <item>
      <title>new、call、apply、bine函数的实现</title>
      <link>https://wuchuan.monster/posts/newcallapplybine%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 11 Jan 2020 17:43:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/newcallapplybine%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>new new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</description>
    </item>
    
  </channel>
</rss>