<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wu Chuan Blogs</title>
    <link>https://wuchuan.monster/</link>
    <description>Recent content on Wu Chuan Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 13 Jan 2020 10:12:19 +0800</lastBuildDate>
    
	<atom:link href="https://wuchuan.monster/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>flex布局</title>
      <link>https://wuchuan.monster/posts/flexgrid%E5%B8%83%E5%B1%80/</link>
      <pubDate>Mon, 13 Jan 2020 10:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/flexgrid%E5%B8%83%E5%B1%80/</guid>
      <description>flex container属性:
.container{display:flex;}把容器定义为flex； flex-direction:
.container{flex-direction:row|row-reverse |column|column-reverse;} row（默认值）：从左到右ltr；从右到左rtl row-reverse：从右到左ltr; 从左到右rtl column：与row上至下相同 column-reverse：与row-reverse下至上相同  flex-wrap
.container{flex-wrap:nowrap | wrap | wrap-reverse;} nowrap （默认）：所有弹性项目都在一行上 wrap：弹性项目将从上到下缠绕在多行上。 wrap-reverse：弹性项目将从下到上缠绕在多行上。 flex-flow: 这是flex-direction和flex-wrap属性的简写，它们一起定义了伸缩容器的主轴和交叉轴。默认值为row nowrap。  flex-flow:&amp;lt;&amp;#39;flex-direction&amp;#39;&amp;gt;||&amp;lt;&amp;#39;flex-wrap&amp;#39;&amp;gt;主轴对齐方式： flex-content
.container {justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;} flex-start （默认）：物品被包装在弹性方向的开始处。 flex-end：项目在伸缩方向的末端打包。 start：物品被包装到方向的起点writing-mode。 end：物品朝着方向的末端包装writing-mode。 left：项目朝着容器的左边缘包装，除非对而言没有意义flex-direction，则其行为类似于start。 right：物品会朝着容器的右边缘包装，除非对而言没有意义flex-direction，则其行为类似于start。 center：项目沿线居中 space-between：项目在行中均匀分布；第一项位于开始行，最后一项位于结束行 space-around：项目在行中均匀分布，并且周围有相等的空间。请注意，从视觉上看，空间是不相等的，因为所有项目的两侧都具有相等的空间。第一项相对于容器边缘有一个单位的空间，但是下一项之间有两个单位的空间，因为下一项具有自己的适用间距。 space-evenly：分配项目，以使任意两个项目之间的间距（以及到边缘的间距）相等。 次轴对齐方式:  align-items</description>
    </item>
    
    <item>
      <title>jQuery学习小结</title>
      <link>https://wuchuan.monster/posts/jquery%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sun, 12 Jan 2020 19:43:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/jquery%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</guid>
      <description>1. jQuery 如何获取元素 jQuery的基本设计思想和主要用法，就是&amp;quot;选择某个网页元素，然后对其进行某种操作&amp;rdquo;。这是它区别于其他Javascript库的根本特点。
使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()（简写为$），然后得到被选中的元素。
选择表达式可以是CSS选择器：
$(document) //选择整个文档对象$(&amp;#39;#myId&amp;#39;) //选择ID为myId的网页元素$(&amp;#39;div.myClass&amp;#39;) // 选择class为myClass的div元素$(&amp;#39;input[name=first]&amp;#39;) // 选择name属性等于first的input元素也可以是jQuery特有的表达式：
$(&amp;#39;a:first&amp;#39;) //选择网页中第一个a元素$(&amp;#39;tr:odd&amp;#39;) //选择表格的奇数行$(&amp;#39;#myForm :input&amp;#39;) // 选择表单中的input元素$(&amp;#39;div:visible&amp;#39;) //选择可见的div元素$(&amp;#39;div:gt(2)&amp;#39;) // 选择所有的div元素，除了前三个$(&amp;#39;div:animated&amp;#39;) // 选择当前处于动画状态的div元素2. jQuery 的链式操作是怎样的 jQuery的链式操作，就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来，比如：
$(&amp;#39;div&amp;#39;).find(&amp;#39;h3&amp;#39;).eq(2).html(&amp;#39;Hello&amp;#39;);分解开来，就是下面这样：
$(&amp;#39;div&amp;#39;) //找到div元素.find(&amp;#39;h3&amp;#39;) //选择其中的h3元素.eq(2) //选择第3个h3元素.html(&amp;#39;Hello&amp;#39;); //将它的内容改为Hello这是jQuery最令人称道、最方便的特点。它的原理在于每一步的jQuery操作，返回的都是一个jQuery对象，所以不同操作可以连在一起。
jQuery还提供了.end()方法，使得结果集可以后退一步：
$(&amp;#39;div&amp;#39;).find(&amp;#39;h3&amp;#39;).eq(2).html(&amp;#39;Hello&amp;#39;).end() //退回到选中所有的h3元素的那一步.eq(0) //选中第一个h3元素.</description>
    </item>
    
    <item>
      <title>new、call、apply、bine函数的实现</title>
      <link>https://wuchuan.monster/posts/js%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Sun, 12 Jan 2020 17:43:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/js%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>原型,共有属性： 修改共有属性 obj.proto.toString=&#39;xxx&amp;rsquo; //不推荐 Object.prototype.toString=&#39;xxx&amp;rsquo; 修改原型 obj.__proto__=common let obj = Object.create(common)</description>
    </item>
    
    <item>
      <title>new、call、apply、bine函数的实现</title>
      <link>https://wuchuan.monster/posts/newcallapplybine%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 11 Jan 2020 17:43:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/newcallapplybine%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>new new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</description>
    </item>
    
    <item>
      <title>JavaScript this </title>
      <link>https://wuchuan.monster/posts/this/</link>
      <pubDate>Sat, 11 Jan 2020 13:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/this/</guid>
      <description>1. 之前我们说过 this 是在运行时进行绑定的， 并不是在编写时绑定， 它的上下文取决于函数调 用时的各种条件。 this 的绑定和函数声明的位置没有任何关系， 只取决于函数的调用方式。
2. 当一个函数被调用时， 会创建一个活动记录（有时候也称为执行上下文）。 这个记录会包 含函数在哪里被调用（调用栈）、 函数的调用方法、 传入的参数等信息。 this 就是记录的 其中一个属性， 会在函数执行的过程中用到。
3. 默认绑定 =&amp;gt; 绑定全局 function foo() {console.log( this.a );}var a = 2;foo(); // 24. 显示绑定（call,apply,bind)  硬绑定  function foo() {console.log(this.a);}var obj = {a: 2};var bar = function() {foo.call(obj);};bar(); // 2setTimeout(bar, 100); // 2// 硬绑定的 bar 不可能再修改它的 thisbar.</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://wuchuan.monster/posts/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sun, 05 Jan 2020 18:58:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>1. 解释为什么如下代码会打印 6 个 6 let i = 0for(i = 0; i&amp;lt;6; i++){setTimeout(()=&amp;gt;{console.log(i)},0)}答： 因为 setTimeout() 方法的意思是等一会打印出 i 的值，他要等循环先执行完，才会打印。循环执行完i===6，所以会打印6个6。
 就是for循环要先执行完6次，i变成了6； 然后 setTimeout() 方法在进入循环，打印6次；  2. 写出让上面代码打印 0、1、2、3、4、5 的方法 答： for(let i = 0; i&amp;lt;6; i++){setTimeout(()=&amp;gt;{console.log(i)},0)}3. 除了使用 for let 配合，还有什么其他方法可以打印出 0、1、2、3、4、5 答： let i = 0;while (i &amp;lt; 5) {i++;console.log(i)}</description>
    </item>
    
    <item>
      <title>JavaSript的诞生</title>
      <link>https://wuchuan.monster/posts/javasript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Wed, 01 Jan 2020 13:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/javasript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScirpt 创始人 1995 年，网景招募了布兰登·艾克，目标是把 Scheme 语言嵌入到 Netscape Navigator 浏览器当中。但更早之前，网景已经跟昇阳合作在 Netscape Navigator 中支持 Java，这时网景内部产生激烈的争论。后来网景决定发明一种与 Java 搭配使用的辅助脚本语言并且语法上有些类似，这个决策导致排除了采用现有的语言，例如 Perl、Python、Tcl 或 Scheme。为了在其他竞争提案中捍卫 JavaScript 这个想法，公司需要有一个可以运作的原型。艾克在 1995 年 5 月仅花了十天时间就把原型设计出来了。
JavaScirpt 标准化 1996 年 11 月，网景正式向 ECMA（欧洲计算机制造商协会）提交语言标准。1997 年 6 月，ECMA 以 JavaScript 语言为基础制定了 ECMAScript 标准规范 ECMA-262。JavaScript 成为了 ECMAScript 最著名的实现之一[16]。除此之外，ActionScript 和 JScript 也都是 ECMAScript 规范的实现语言。尽管 JavaScript 作为给非程序人员的脚本语言，而非作为给程序人员的脚本语言来推广和宣传，但是 JavaScript 具有非常丰富的特性。
 1997 年 6 月，第一版 ECMAScript 发布 1999 年 12 月，第三版发布，这个版本使用最广 2009 年 12 月，第五版发布，增加了一些新功能 2015 年 6 月，第六版发布，新浏览器都支持这一版本 之后每年发布一版，版本号以年饭命名  JavaScirpt 和 ECMAScript 的关系  ECMAScript 是纸上的标准，JS 是浏览器的实现 纸上标准往往落后于浏览器，先实现，再写进标准  JS 的兴起  IE 市场份额巨大导致 JS 停滞了 10 年，直至 Chrome 主导市场地位，才有了后面的每年更新 移动市场的兴起，手机上没人会安装 IE 浏览器 2004 年愚人节，谷歌发布 Gmail 在线网页为前端带来无限可能 2005 年，Jesse 将谷歌用到的技术命名为 AJAX，前端技术正式出现 2006 年，jQuery 发布，是目前最长寿的 JS 库，后来 IE 不行了，jQuery 才稍微没那么火  JS 爆发  Chrome 的 JS 引擎叫做 V8 2009 年，Ryan 基于 V8 创建了 Node.</description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>https://wuchuan.monster/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 13:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>1. 声明对象的两种语法 示例：
let obj = {&amp;#39;name&amp;#39;: &amp;#39;frank&amp;#39;, &amp;#39;age&amp;#39;: 18}let obj = new Object({&amp;#39;name&amp;#39;: &amp;#39;frank&amp;#39;, &amp;#39;age&amp;#39;: 18})// 一般使用第一种2. 如何删除对象的属性   delete 命令用于删除对象的属性，删除成功后返回 true。
  delete obj.xxx 或者 delete obj[&amp;lsquo;xxx&amp;rsquo;] 这俩种都可以删除对象属性。
  下面代码中，delete命令删除对象obj的p属性。删除后，再读取p属性就会返回undefined，而且Object.keys方法的返回值也不再包括该属性。
var obj = { p: 1 };Object.keys(obj) // [&amp;#34;p&amp;#34;]delete obj.p // trueobj.p // undefinedObject.keys(obj) // []  3. 如何查看对象的属性   查看一个对象本身的所有属性，可以使用Object.keys方法。
var obj = {key1: 1,key2: 2};Object.</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>https://wuchuan.monster/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 13:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>什么是表达式和语句 JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。
语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。
var a = 1 + 3;这条语句先用 var 命令，声明了变量 a ，然后将 1 + 3 的运算结果赋值给变量 a。
1 + 3叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。
语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。
var a = 1 + 3 ; var b = &amp;#39;abc&amp;#39;;分号前面可以没有任何内容，JavaScript 引擎将其视为空语句。
;;;上面的代码就表示 3 个空语句。
表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。
1 + 3;&amp;#39;abc&amp;#39;;上面两行语句只是单纯地产生一个值，并没有任何实际的意义。
   标识符的规则 标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以 a 和 A 是两个不同的标识符。
标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。
 第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字 0-9。  简单说，标识符命名规则如下。</description>
    </item>
    
    <item>
      <title>CSS 知识总结</title>
      <link>https://wuchuan.monster/posts/css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 31 Dec 2019 13:12:19 +0800</pubDate>
      
      <guid>https://wuchuan.monster/posts/css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>一. 浏览器渲染原理 CSSOM 树和 DOM 树合并成渲染树，然后用于计算每个可见元素的布局，并输出给绘制流程，将像素渲染到屏幕上。优化上述每一个步骤对实现最佳渲染性能至关重要。
 DOM 树与 CSSOM 树合并后形成渲染树。 渲染树只包含渲染网页所需的节点。 布局计算每个对象的精确位置和大小。 最后一步是绘制，使用最终渲染树将像素渲染到屏幕上。  第一步是让浏览器将 DOM 和 CSSOM 合并成一个“渲染树”，网罗网页上所有可见的 DOM 内容，以及每个节点的所有 CSSOM 样式信息。
二. CSS 动画的两种做法（transition 和 animation）   transition CSS 属性是 transition-property(属性名)，transition-duration(时长)，transition-timing-function(过渡方式) 和 transition-delay(延时) 的一个简写属性。
transition一般配合transform使用；
transform属性允许你旋转，缩放，倾斜或平移给定元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的。 transform有四个常用属性
 translate 位移 scale 缩放(甚用会出现图片模糊) rotate 旋转 skew 倾斜 他们都作用在 X,Y,Z 轴上； 下面这段代码定义了属性 transition,动画时长 1s，线性移动；    &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!--HTML--&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;JS Bin&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;button id=&amp;#34;button&amp;#34;&amp;gt;开始&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; /*CSS*/ #demo{ width: 100px; height: 100px; border: 1px solid red; margin: 50px; transition: transform 1s linear; } #demo.</description>
    </item>
    
  </channel>
</rss>